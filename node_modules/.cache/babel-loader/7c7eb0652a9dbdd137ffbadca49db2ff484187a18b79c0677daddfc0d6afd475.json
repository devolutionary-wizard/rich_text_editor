{"ast":null,"code":"var _jsxFileName = \"/Users/denji/rich_text_editor/front-end/src/App.js\",\n  _s = $RefreshSig$();\nimport { useMemo, useRef } from \"react\";\nimport axios from \"axios\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const editorRef = useRef(null);\n  const imageHandler = a => {\n    const input = document.createElement(\"input\");\n    input.setAttribute(\"type\", \"file\");\n    input.setAttribute(\"accept\", \"image/*\");\n    input.click();\n    input.onchange = () => {\n      const file = input.files[0];\n      console.log(\"====================================\");\n      console.log(\"damn\");\n      console.log(file);\n      console.log(\"====================================\");\n      // file type is only image.\n      if (/^image\\//.test(file.type)) {\n        saveToServer(file);\n      } else {\n        console.warn(\"You could only upload images.\");\n      }\n    };\n  };\n  function saveToServer(file) {\n    const fd = new FormData();\n    fd.append(\"test\", file);\n    console.log(\"====================================\");\n    console.log(file);\n    console.log(\"====================================\");\n    axios.post(\"http://localhost:3600/image\", fd).then(res => res.json()).then(res => {\n      console.log(res);\n      const url = res.data[\"secure_url\"];\n      insertToEditor(url);\n    }).catch(err => console.log(err));\n  }\n  function insertToEditor(url) {\n    editorRef.current.getEditor().insertEmbed(null, \"image\", url);\n  }\n  const modules = useMemo(() => ({\n    toolbar: {\n      container: [[\"image\"]],\n      handlers: {\n        image: imageHandler\n      }\n    }\n  }));\n  return /*#__PURE__*/_jsxDEV(ReactQuill, {\n    modules: modules,\n    forwardedRef: editorRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 10\n  }, this);\n}\n_s(App, \"/6B/1SsFeEbz6FniV8vCtNxL6Us=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useMemo","useRef","axios","ReactQuill","App","editorRef","imageHandler","a","input","document","createElement","setAttribute","click","onchange","file","files","console","log","test","type","saveToServer","warn","fd","FormData","append","post","then","res","json","url","data","insertToEditor","catch","err","current","getEditor","insertEmbed","modules","toolbar","container","handlers","image"],"sources":["/Users/denji/rich_text_editor/front-end/src/App.js"],"sourcesContent":["import { useMemo, useRef } from \"react\";\nimport axios from \"axios\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\n\nfunction App() {\n  const editorRef = useRef(null);\n  const imageHandler = (a) => {\n    const input = document.createElement(\"input\");\n    input.setAttribute(\"type\", \"file\");\n    input.setAttribute(\"accept\", \"image/*\");\n    input.click();\n\n    input.onchange = () => {\n      const file = input.files[0];\n\n      console.log(\"====================================\");\n      console.log(\"damn\");\n      console.log(file);\n      console.log(\"====================================\");\n      // file type is only image.\n      if (/^image\\//.test(file.type)) {\n        saveToServer(file);\n      } else {\n        console.warn(\"You could only upload images.\");\n      }\n    };\n  };\n\n  function saveToServer(file) {\n    const fd = new FormData();\n    fd.append(\"test\", file);\n    console.log(\"====================================\");\n    console.log(file);\n    console.log(\"====================================\");\n    axios\n      .post(\"http://localhost:3600/image\", fd)\n      .then((res) => res.json())\n      .then((res) => {\n        console.log(res);\n        const url = res.data[\"secure_url\"];\n        insertToEditor(url);\n      })\n      .catch((err) => console.log(err));\n  }\n\n  function insertToEditor(url) {\n    editorRef.current.getEditor().insertEmbed(null, \"image\", url);\n  }\n\n  const modules = useMemo(() => ({\n    toolbar: {\n      container: [[\"image\"]],\n\n      handlers: {\n        image: imageHandler,\n      },\n    },\n  }));\n  return <ReactQuill modules={modules} forwardedRef={editorRef} />;\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,OAAO,EAAEC,MAAM,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,aAAa;AACpC,OAAO,iCAAiC;AAAC;AAEzC,SAASC,GAAG,GAAG;EAAA;EACb,MAAMC,SAAS,GAAGJ,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMK,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;IAC7CF,KAAK,CAACG,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC;IAClCH,KAAK,CAACG,YAAY,CAAC,QAAQ,EAAE,SAAS,CAAC;IACvCH,KAAK,CAACI,KAAK,EAAE;IAEbJ,KAAK,CAACK,QAAQ,GAAG,MAAM;MACrB,MAAMC,IAAI,GAAGN,KAAK,CAACO,KAAK,CAAC,CAAC,CAAC;MAE3BC,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MACnDD,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MACnBD,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MACjBE,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MACnD;MACA,IAAI,UAAU,CAACC,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAC,EAAE;QAC9BC,YAAY,CAACN,IAAI,CAAC;MACpB,CAAC,MAAM;QACLE,OAAO,CAACK,IAAI,CAAC,+BAA+B,CAAC;MAC/C;IACF,CAAC;EACH,CAAC;EAED,SAASD,YAAY,CAACN,IAAI,EAAE;IAC1B,MAAMQ,EAAE,GAAG,IAAIC,QAAQ,EAAE;IACzBD,EAAE,CAACE,MAAM,CAAC,MAAM,EAAEV,IAAI,CAAC;IACvBE,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;IACnDD,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;IACjBE,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;IACnDf,KAAK,CACFuB,IAAI,CAAC,6BAA6B,EAAEH,EAAE,CAAC,CACvCI,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CAAEC,GAAG,IAAK;MACbX,OAAO,CAACC,GAAG,CAACU,GAAG,CAAC;MAChB,MAAME,GAAG,GAAGF,GAAG,CAACG,IAAI,CAAC,YAAY,CAAC;MAClCC,cAAc,CAACF,GAAG,CAAC;IACrB,CAAC,CAAC,CACDG,KAAK,CAAEC,GAAG,IAAKjB,OAAO,CAACC,GAAG,CAACgB,GAAG,CAAC,CAAC;EACrC;EAEA,SAASF,cAAc,CAACF,GAAG,EAAE;IAC3BxB,SAAS,CAAC6B,OAAO,CAACC,SAAS,EAAE,CAACC,WAAW,CAAC,IAAI,EAAE,OAAO,EAAEP,GAAG,CAAC;EAC/D;EAEA,MAAMQ,OAAO,GAAGrC,OAAO,CAAC,OAAO;IAC7BsC,OAAO,EAAE;MACPC,SAAS,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;MAEtBC,QAAQ,EAAE;QACRC,KAAK,EAAEnC;MACT;IACF;EACF,CAAC,CAAC,CAAC;EACH,oBAAO,QAAC,UAAU;IAAC,OAAO,EAAE+B,OAAQ;IAAC,YAAY,EAAEhC;EAAU;IAAA;IAAA;IAAA;EAAA,QAAG;AAClE;AAAC,GAvDQD,GAAG;AAAA,KAAHA,GAAG;AAyDZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}